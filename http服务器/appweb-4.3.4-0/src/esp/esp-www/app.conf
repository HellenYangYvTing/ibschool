#
#   ${NAME}.conf -- Configuration the ${TITLE} ESP application
#
#   Use this file if you want to host this application with a pre-existing appweb.conf. 
#   Include this file from the master appweb.conf by placing under conf/apps.
#   

<if ESP_MODULE>
    #
    #   Define an application. This creates a URI location for "/${NAME}" and uses the ESP 
    #   application located at ${DIR}. You can alternatively use a Route block below instead 
    #   of the single EspApp directive by deleting the USE_ROUTE_BLOCK conditional. The 
    #   route block provides more control over exactly how the application is defined and 
    #   configured. Don't use both!
    #
    <if !USE_ROUTE_BLOCK>
        EspApp /${NAME} ${DIR} restful ${DATABASE}://${NAME}.${DATABASE}
    <else>
        <Route /${NAME}>
            #
            #   Descriptive name for the route
            #
            Name ${NAME}

            #
            #   Strip the URI prefix internally
            #
            Prefix /${NAME}

            #
            #   Ensure the espHandler is responsible for serving content on this route   
            #
            AddHandler espHandler

            #
            #   Define the directories used for cache, controllers, layouts, static and views. 
            #   Use "mvc" to set all directory names to their Model-View-Controller defaults. 
            #   This must be done before any route directives.
            #
            Documents "."
            EspDir mvc

            #
            #   Define a restful route set
            #
            EspRouteSet restful

            #
            #   Alternatively, define the routes the home and static routes and then a generic resource group
            #
            # EspRoute /${NAME}/home GET,POST %^/${NAME}(/)*$ ${STATIC_DIR}/index.esp
            # EspRoute /${NAME}/static GET %^/${NAME}/static/(.*) ${STATIC_DIR}/$1
            # EspResourceGroup

            #
            #   Alternatively, define the routes one-by-one
            #
            # EspRoute /${NAME}/home GET,POST ^/${NAME}(/)*$ ${STATIC_DIR}/index.esp
            # EspRoute /${NAME}/static GET ^/${NAME}/static/(.*) ${STATIC_DIR}/$1
            # EspRoute list GET       ^/${NAME}/{controller}(/)*$                  ${controller}-list     ${controller}.c
            # EspRoute init GET       ^/${NAME}/{controller}/init$                 ${controller}-init      ${controller}.c
            # EspRoute create POST    ^/${NAME}/{controller}(/)*$                  ${controller}-create    ${controller}.c
            # EspRoute edit GET       ^/${NAME}/{controller}/{id=[0-9]+}/edit$     ${controller}-edit      ${controller}.c
            # EspRoute show GET       ^/${NAME}/{controller}/{id=[0-9]+}$          ${controller}-show      ${controller}.c
            # EspRoute update PUT     ^/${NAME}/{controller}/{id=[0-9]+}$          ${controller}-update    ${controller}.c
            # EspRoute destroy DELETE ^/${NAME}/{controller}/{id=[0-9]+}$          ${controller}-destroy   ${controller}.c
            # EspRoute custom POST    ^/${NAME}/{controller}/{action}/{id=[0-9]+}$ ${controller}-$2        ${controller}.c
            # EspRoute default ALL    ^/${NAME}/{controller}/{action}$             ${controller}-cmd-${2}  ${controller}.c

            #
            #   Define the application database
            #
            EspDb ${DATABASE}://${NAME}.${DATABASE}

        </Route>
    </if>

    #
    #   LogRoutes will display the routing table
    #
    # LogRoutes
    # LogRoutes full

    #
    #   Keep the compiled view source in the cache directory
    #
    EspKeepSource on

    #
    #   Automatically recompile and update modified controllers, views and esp web pages
    #
    EspUpdate on

    #
    #   Show recompilation and internal errors in the browser
    #
    EspShowErrors on

    #
    #   Load the application when compiled flat into a single module.
    #   Use this if you wish to compile flat (esp compile flat)
    #
    # EspLoad ${NAME} cache/app

</if>
