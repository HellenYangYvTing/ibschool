/*
    test.bit
 */

Bit.load({
    targets: {
        testAppweb: {
            type: 'exe',
            headers:   [ 'src/*.h' ],
            sources:   [ 'src/testAppweb.c', 'src/testHttp.c' ],
            depends:   [ 'libappweb' ],
            platforms: [ 'local' ],
        },

        'test-testScript': {
            path: 'cgi-bin/testScript',
            build: "
                let path = Path('cgi-bin/testScript')
                path.write('#!' + bit.dir.bin.join('cgiProgram${EXE}' + '\n'))
                path.setAttributes({permissions: 0755})
            ",
            'generate-sh': "echo '#!${BIN}/cgiProgram${EXE}' >cgi-bin/testScript ; chmod +x cgi-bin/testScript",
            depends: ['cgiProgram'],
            platforms: [ 'local' ],
            packs: [ 'cgi' ],
        },

        'test-cache.cgi': {
            path: 'web/caching/cache.cgi',
            build: "
                let path = Path('web/caching/cache.cgi')
                path.write('#!' + App.exeDir.join('ejs') + '\n' + 
                    'print(\"HTTP/1.0 200 OK\nContent-Type: text/plain\n\n\" + Date() + \"\n\")')
                path.setAttributes({permissions: 0755})
            ",
            'generate-sh': "\
                echo \"#!`type -p ejs`\" >web/caching/cache.cgi
                echo 'print(\"HTTP/1.0 200 OK\\nContent-Type: text/plain\\n\\n\" + Date() + \"\\n\")' >>web/caching/cache.cgi
                chmod +x web/caching/cache.cgi
            ",
            platforms: [ 'local' ],
            packs: [ 'cgi' ],
        },

        'test-basic.cgi': {
            path: 'web/auth/basic/basic.cgi',
            build: "
                let path = Path('web/auth/basic/basic.cgi')
                path.write('#!' + App.exeDir.join('ejs') + '\n' + 
                    'print(\"HTTP/1.0 200 OK\nContent-Type: text/plain\n\n\" + serialize(App.env, {pretty: true}) + \"\n\")')
                path.setAttributes({permissions: 0755})
            ",
            'generate-sh': "\
                echo \"#!`type -p ejs`\" >web/auth/basic/basic.cgi
                echo 'print(\"HTTP/1.0 200 OK\\nContent-Type: text/plain\\n\\n\" + serialize(App.env, {pretty: true}) + \"\\n\")' >>web/auth/basic/basic.cgi
                chmod +x web/auth/basic/basic.cgi
            ",
            platforms: [ 'local' ],
            packs: [ 'cgi' ],
        },

        'test-cgiProgram': {
            path: 'cgi-bin/cgiProgram${EXE}',
            build: "
                let perms = { permissions: 0755 }
                let cgiProgram = bit.dir.bin.join('cgiProgram${EXE}')
                cp(cgiProgram, Path('cgi-bin/cgiProgram${EXE}'), perms)
                cp(cgiProgram, Path('cgi-bin/nph-cgiProgram${EXE}'), perms)
                cp(cgiProgram, Path('cgi-bin/cgi Program${EXE}'), perms)
                cp(cgiProgram, Path('web/cgiProgram.cgi'), perms)
            ",
            'generate-sh': "\
                cp ${BIN}/cgiProgram${EXE} cgi-bin/cgiProgram${EXE}
                cp ${BIN}/cgiProgram${EXE} cgi-bin/nph-cgiProgram${EXE}
                cp ${BIN}/cgiProgram${EXE} 'cgi-bin/cgi Program${EXE}'
                cp ${BIN}/cgiProgram${EXE} web/cgiProgram.cgi
                chmod +x cgi-bin/* web/cgiProgram.cgi
            ",
            depends: ['cgiProgram'],
            platforms: [ 'local' ],
            packs: [ 'cgi' ],
        },

        'test.js': {
            type:   'file',
            path:   'web/js/',
            files:  ['../src/esp/esp-www/files/static/js/'],
        },

        test: {
            action: "
                let ro = {noio: true}
                let depth = bit.settings.depth
                Path('cache').makeDir()
                run('utest -v -i 1 --depth ' + depth, ro)
                if (depth >= 2) {
                    trace('Test', 'Light load tests')
                    run('utest -v -i 5 --depth ' + depth, ro)
                }
                //  MOB - thread tests don't work yet
                if (depth >= 3) {
                    for each (t in [2, 4]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 20 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                if (depth >= 4) {
                    trace('Test', 'Longevity load tests')
                    run('utest -v -i 100 --depth ' + depth, ro)
                    for each (t in [8, 16]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 100 --depth ' + depth + ' --threads ' + t, ro)
                    }
                }
                trace('Test', 'Unit tests complete')
            ",
            platforms: [ 'local' ],
        },

        'auth.conf': {
            action: "
                let path = Path('new.conf')
                trace('Generate', 'Authorization file: ' + path)
                path.write('#\n#   ' + path + ' - Authorization roles and users\n#\n\n')
                path.write('Role user view\nRole administrator view\nRole executive manage direct\n\n')
                run('authpass -p pass4 ' + path + ' example.com julie user')
                run('authpass -p pass3 ' + path + ' example.com peter user')
                run('authpass -p pass2 ' + path + ' example.com mary user executive')
                run('authpass -p pass1 ' + path + ' example.com joshua user administrator purchase')
                
            ",
        },

        testPackage: {
            type: 'test',
            action: "
                let package = packageName()
                if (!package || !package.exists || bit.settings.depth < 2) {
                    trace('Test', 'testPackage -- SKIPPED (Runs at depth 2 on windows or macosx)')
                } else {
                    if (Config.OS == 'macosx' && App.uid != 0) {
                        trace('Test', 'testPackage -- SKIPPED (Must run as root)')
                    } else {
                        trace('Test', 'testPackage')
                        if (bit.prefixes.bin.join('uninstall').exists) {
                            trace('Test', 'Cleanup prior to installation')
                            uninstallPackage()
                            checkUninstalled()
                        }
                        installPackage()
                        if (missing = checkInstalled()) {
                            trace('Test', 'Install is missing files: ' + missing)
                        }
                        let s = bit.settings
                        trace('Test', 'appweb -V')
                        assert(Cmd.run([bit.prefixes.bin.join('appweb'), '-V']).trim() == s.version + '-' + s.buildNumber)
                        trace('Test', 'appweb running')
                        assert(Cmd.ps(/appweb/))
                        let http = new Http
                        trace('Test', 'GET /index.html')
                        App.sleep(3000)
                        http.get('/index.html')
                        assert(http.response.contains('Embedthis Appweb'))
                        uninstallPackage()
                        if (Config.OS == 'windows') App.sleep(1000)
                        if (existing = checkUninstalled()) {
                            trace('Warning', 'The uninstall for testPackage was not clean: ' + existing)
                        } else {
                            trace('Test', 'Uninstall is clean')
                        }
                    }
                }
            ",
        },

        'test-run': {
            enable: "!bit.platform.cross",
            depends: [ 'compile' ],
            action: "
                trace('Run', 'From directory src/server')
                run('appweb -v', {noio: true})
            ",
            generate: "${BIN}/appweb -v"
        },

        'clean-test': {
            type: 'clean',                                                                                 
            action: "                                                                                      
                rm('cache/*')
                rm('app/cache/*')
                rm('junk/**')
                rm('web/js')
                Path('cache').makeDir()
                Path('cache/.keep').write()
                Path('app/cache').makeDir()
                Path('app/cache/.keep').write()
                Path('web/caching/cache.cgi').remove()
                Path('web/auth/basic/basic.cgi').remove()
            ",
        },  
    },
})
