#
#   appweb.conf -- Appweb configuration for test
#   

# ErrorLog              error.log level=2 append
# AccessLog             access.log append

Listen                  4000

DirectoryIndex          index.esp
PutMethod               on
UploadDir               /tmp
UploadAutoDelete        on

SetConnector            netConnector
AddOutputFilter         rangeFilter
AddFilter               chunkFilter
AddInputFilter          uploadFilter
AddHandler              fileHandler html git jpeg jpg png pdf ico css js ""

<if ESP_MODULE>
    LoadModule espHandler mod_esp
    AddHandler espHandler *.esp
    include ${LIBDIR}/esp.conf
    EspDir cache cache
    EspKeepSource on
    EspShowErrors on
    EspUpdate on
    Cache 3600

    #
    #   Define the application. This creates a URI route for "/" for an ESP application in the current directory.
    #   It also creates an "mvc" (Model View Controller) style route package using restful routes.
    #
    EspApp / . mvc


    #
    #   Alternatively uncomment this to use a location definition instead of the EspApp above. This provides more
    #   control over exactly how the application is defined and configured.
    #
    # <Route />
        #
        #   Descriptive name for the route
        #
        # RouteName app

        #
        #   Define the directories used for cache, controllers, layouts, static and views. 
        #   Use "mvc" to set all directory names to their Model-View-Controller defaults.
        #
        # EspDir views views

        #
        #   Load an application that has been compiled flat. This means all the application is compiled into a single
        #   module using "esp compile flat".
        #
        # EspLoad app app/cache/app

        #
        #   Keep the compiled view source in the cache directory
        #
        # EspKeepSource on

        #
        #   Automatically recompile and reload modified controllers, views and esp web pages
        #
        # EspUpdate on

        #
        #   Show recompilation and internal errors in the browser
        #
        # EspShowErrors on

        #
        #   Reset the route table. This clears inherited ESP routes to start afresh.
        #
        # Reset routes

        #
        #   Define a route for the home page
        #
        # EspRoute home GET,POST,PUT %^/$ ${STATIC_DIR}/index.esp

        #
        #   Define a route for static content
        #
        # EspRoute static GET %^/static/(.*) ${STATIC_DIR}/$1

        #
        #   Define a route for controller/actions
        #
        # EspRoute default GET,POST ^/{controller}(~/{action}~) ${controller}-${action} ${controller}.c
        
        #
        #   Alternatively, instead of defining routes one-by-one, you can enable a set of "RESTful" routes.
        #   This can be used without args, or can be used as: "EspRestfulRoutes /URI-prefix controllerName".
        #       EspRoute init GET       ^/{controller}/init         ${controller}-init      ${controller}.c
        #       EspRoute index GET      ^/{controller}(/)$          ${controller}-index     ${controller}.c
        #       EspRoute create POST    ^/{controller}(/)           ${controller}-create    ${controller}.c
        #       EspRoute edit GET       ^/{controller}/{id}/edit    ${controller}-edit      ${controller}.c
        #       EspRoute show GET       ^/{controller}/{id}         ${controller}-show      ${controller}.c
        #       EspRoute update PUT     ^/{controller}/{id}         ${controller}-update    ${controller}.c
        #       EspRoute destroy DELETE ^/{controller}/{id}         ${controller}-destroy   ${controller}.c
        #       EspRoute default ALL    ^/{controller}(~/{action}~) ${controller}-${action} ${controller}.c
        #
        # EspRoutePack resetful

        #
        #   Ensure the espHandler is responsible for serving content on this route   
        #
        # AddHandler espHandler
    # </Route>
</if>

#
#   SSL definition
#
#	<if SSL_MODULE>
#	    LoadModule sslModule mod_ssl
#	    SSLCertificateFile "server.crt"
#	    SSLCertificateKeyFile "server.key.pem"
#	    Listen 443
#	    <VirtualHost *:443>
#	        DocumentRoot "web"
#	        SSLEngine on
#	    </VirtualHost>                                  
#	</if>

#
#   LogRoutes will display the routing table. The "full" option will display a detailed multi-line route table.
#
# LogRoutes full
# LogRoutes
